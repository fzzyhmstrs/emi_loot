plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}
evaluationDependsOn ':xplat'

architectury {
    platformSetupLoomIde()
    neoForge()
}

loom {
    accessWidenerPath = project(":xplat").loom.accessWidenerPath

    mods {
        main {
            sourceSet sourceSets.main
            sourceSet project(':xplat').sourceSets.main
        }
    }
}

configurations {
    common
    shadowCommon
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentNeoForge.extendsFrom common
}

repositories {
    maven {
        url "https://maven.neoforged.net/releases/"
        content {
            includeGroupAndSubgroups "net.neoforged"
            includeGroupAndSubgroups "cpw.mods"
        }
    }
    maven {
        url "https://thedarkcolour.github.io/KotlinForForge/"
    }
}

dependencies {
    neoForge "net.neoforged:neoforge:${rootProject.neoforge_version}"

    modCompileOnly "dev.emi:emi-neoforge:${rootProject.emi_version}:api"

    modRuntimeOnly "dev.emi:emi-neoforge:${rootProject.emi_version}"

    modRuntimeOnly "maven.modrinth:kotlin-for-forge:${rootProject.kff_version}"

    modRuntimeOnly "me.fzzyhmstrs:fzzy_config:${rootProject.fzzy_config_version}+neoforge"
    //modRuntimeOnly "maven.modrinth:symbols-n-stuff:${rootProject.sns_version}"



    common(project(path: ":xplat", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":xplat", configuration: "transformProductionNeoForge")) { transitive = false }
}

processResources {
    inputs.property "version", project.version

    filesMatching("META-INF/neoforge.mods.toml") {
        expand "version": project.version
    }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
}

sourcesJar {
    def commonSources = project(":xplat").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}